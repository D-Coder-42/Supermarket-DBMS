--ITEM

CREATE OR REPLACE TRIGGER BEFORE_ORDER
BEFORE INSERT ON ORDERS
FOR EACH ROW
DECLARE
CUSTID CUSTOMER.ID%TYPE;
customer_added BOOLEAN;
BEGIN
SELECT ID INTO CUSTID FROM CUSTOMER WHERE ID = :NEW.CUSTOMERID;
IF CUSTID IS NULL THEN
customer_added := FALSE;
    WHILE NOT customer_added LOOP
      customer_added := Add_customer(&name,&email,&phone);
    END LOOP;
END IF;
END;
/

CREATE OR REPLACE TRIGGER AFTER_ORDER
AFTER INSERT ON ORDERS
DECLARE
ID ORDERS.ORDERID%TYPE;
BEGIN
SELECT NEXT_ORDERID INTO ID FROM REFERENCE_VARIABLES;
UPDATE ORDERS SET ORDERID = ID WHERE ORDERID IS NULL;
UPDATE REFERENCE_VARIABLES SET NEXT_ORDERID = 'O'|| TO_CHAR(TO_NUMBER(SUBSTR(ID,2,4))+1,'FM0000');
END;
/

CREATE OR REPLACE TRIGGER NEW_CUSTOMER
AFTER INSERT ON CUSTOMER
DECLARE 
CUSTID CUSTOMER.ID%TYPE;
BEGIN
SELECT NEXT_CUSTOMERID INTO CUSTID FROM REFERENCE_VARIABLES;
UPDATE CUSTOMER SET ID = CUSTID WHERE ID = 'C0000';
UPDATE REFERENCE_VARIABLES SET NEXT_CUSTOMERID = 'C'|| TO_CHAR(TO_NUMBER(SUBSTR(CUSTID,2,4))+1,'FM0000');
END;
/

CREATE OR REPLACE TRIGGER NEW_EMPLOYEE
AFTER INSERT ON EMPLOYEE
DECLARE 
ID EMPLOYEE.EMPCODE%TYPE;
BEGIN
SELECT NEXT_EMPCODE INTO ID FROM REFERENCE_VARIABLES;
UPDATE EMPLOYEE SET EMPCODE = ID WHERE EMPCODE = 'E00';
UPDATE REFERENCE_VARIABLES SET NEXT_EMPCODE = 'E'|| TO_CHAR(TO_NUMBER(SUBSTR(ID,2,4))+1,'FM0000');
END;
/

CREATE OR REPLACE TRIGGER DELETE_EMPLOYEE
AFTER DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
IF :OLD.ADDRESSID IS NOT NULL THEN
DELETE FROM ADDRESS WHERE ID = :OLD.ADDRESSID;
END IF;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/